{"version":3,"sources":["logo.svg","Calculations.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","TemperatureCalculations","fahrenheit","celsius","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","scaleNames","c","f","TemperatureInput","props","handleChange","bind","e","this","onTemperatureChange","target","value","scale","className","onChange","React","Component","TemperatureMessage","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","calc","tryConvert","toCelsius","toFahrenheit","App","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d707ff5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","class TemperatureCalculations {\r\n toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n  }\r\n  \r\n toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n  }\r\n  \r\n tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n      return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n  }\r\n   \r\n}\r\n\r\nexport default TemperatureCalculations;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport TemperatureCalculations from './Calculations';\r\n\r\n\r\nconst scaleNames = {\r\n  c: 'Celsius',\r\n  f: 'Fahrenheit'\r\n};\r\n\r\nclass TemperatureInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.onTemperatureChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    const temperature = this.props.temperature;\r\n    const scale = this.props.scale;\r\n    const className = \"scale-type-\" + scale;\r\n    return (\r\n      <fieldset>\r\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n        <input className={className} value={temperature}\r\n               onChange={this.handleChange} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n\r\nclass TemperatureMessage extends React.Component {\r\n\r\n  render() {\r\n    const celsius = this.props.celsius;\r\n    const fahrenheit = this.props.fahrenheit;\r\n    \r\n    if (!celsius || !fahrenheit) {\r\n      return (\r\n        <div className=\"temperatureMesssage\"> \r\n          <h2>Watiting for input...</h2>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"temperatureMesssage\">\r\n        <h2>{celsius} Celsius is {fahrenheit} Fahrenheit</h2>\r\n      </div>);\r\n  };\r\n}\r\n\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.state = {temperature: '', scale: 'c'};\r\n  }\r\n\r\n  handleCelsiusChange(temperature) {\r\n    this.setState({scale: 'c', temperature});\r\n  }\r\n\r\n  handleFahrenheitChange(temperature) {\r\n    this.setState({scale: 'f', temperature});\r\n  }\r\n\r\n  render() {\r\n    const calc = new TemperatureCalculations();\r\n\r\n    const scale = this.state.scale;\r\n    const temperature = this.state.temperature;\r\n    const celsius = scale === 'f' ? calc.tryConvert(temperature, calc.toCelsius) : temperature;\r\n    const fahrenheit = scale === 'c' ? calc.tryConvert(temperature, calc.toFahrenheit) : temperature;\r\n\r\n    return (\r\n      <div>\r\n        <TemperatureInput\r\n          scale=\"c\"\r\n          temperature={celsius}\r\n          onTemperatureChange={this.handleCelsiusChange} />\r\n        <TemperatureInput\r\n          scale=\"f\"\r\n          temperature={fahrenheit}\r\n          onTemperatureChange={this.handleFahrenheitChange} />\r\n          <hr/>\r\n          <TemperatureMessage celsius={celsius} fahrenheit={fahrenheit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to Celcius to Farhenheit Calculator!</h1>\r\n        </header>\r\n        \r\n        <div className=\"App-form\">\r\n          {/* <Convert />\r\n          <ShowFarenheit value=\"0\" /> */}\r\n          <Calculator />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}